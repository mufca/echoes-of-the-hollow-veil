import java.nio.file.Files

plugins {
  id 'java'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

dependencies {
  api "com.badlogicgames.gdx:gdx:$gdxVersion"

  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-annotations:$graalHelperVersion"
  }

  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
  testImplementation "org.assertj:assertj-core:$assertjVersion"
  testImplementation "org.mockito:mockito-core:$mockitoVersion"
  testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
}

sourceSets.main.resources.srcDirs = ["assets"]

tasks.named("build") {
  dependsOn(":generateLicenseReport")
}

test {
  useJUnitPlatform()
}

def assetDirectories = [
        "$projectDir/../core/assets/locations",
        "$projectDir/../core/src/test/resources/locations"
]

tasks.register('generateLocationIndexes') {

    doLast {
        assetDirectories.each { directoryPath ->
            def directory = file(directoryPath)
            if (!directory.exists()) {
                println "[!] Warning ${directory} doesnt exist, skipping generation of index.txt"
                return
            }

            def jsonFiles = []
            Files.walk(directory.toPath())
                    .filter { Files.isRegularFile(it) && it.toString().toLowerCase().endsWith(".json") }
                    .forEach { jsonFiles << directory.toPath().relativize(it).toString().replace("\\", "/") }
            if (!jsonFiles.isEmpty()) {
                def indexFile = new File(directory, "index.txt")
                indexFile.text = jsonFiles.join("\n")
                println "[ok] Generated ${jsonFiles.size()} entries to ${indexFile}"
            }
        }
    }
}

tasks.named("processResources") {
    dependsOn("generateLocationIndexes")
}